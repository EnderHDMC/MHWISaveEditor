#pragma once

#include <QString>

#include "filenode.h"

#include "../../types/types.h"
#include "../../platform/common.h"

class Chunk
{
private:
  static const int MagicChunk = 0x00504D43;

  //  0: ac76cb97ec7500133a81038e7a82c80a
  //  1: 6bb5c956e44d00bc305233cfbfaafa25
  //  2: 8f021dccb0f2787206fbdee2390bbb5c
  //  3: da5c1e531d8359157875bd63bfaafa25
  //  4: 1f6d31c883dd716d7e8f598ce23f1929
  //  5: 4bb0de04e4e0856980ccb2942f9ce9f9
  //  6: 8bce54dc4c11139a7875bd63bfaafa25
  //  7: ec13345966ce7312440089a2ceddcee9
  //  8: e4662c709c753a039a2c0f5ae23f1929
  //  9: a492fc9033949c15a033ac223735cca7
  // 10: 25099c1f911a26e5ce9172f07a82c80a
  // 11: d1d29d7446d4fdf1a033ac223735cca7
  // 12: 7eb268373b5d361ed6d313e2933c4dcb
  // 13: a1c7d2ea661895ac7875bd63bfaafa25
  // 14: 82a43b2108797c6a440089a2ceddcee9
  // 15: 41d055b3dd6015167e8f598ce23f1929
  const u8 chunkKeys[16][16] =
  {
    { 0xac, 0x76, 0xcb, 0x97, 0xec, 0x75, 0x00, 0x13, 0x3a, 0x81, 0x03, 0x8e, 0x7a, 0x82, 0xc8, 0x0a },
    { 0x6b, 0xb5, 0xc9, 0x56, 0xe4, 0x4d, 0x00, 0xbc, 0x30, 0x52, 0x33, 0xcf, 0xbf, 0xaa, 0xfa, 0x25 },
    { 0x8f, 0x02, 0x1d, 0xcc, 0xb0, 0xf2, 0x78, 0x72, 0x06, 0xfb, 0xde, 0xe2, 0x39, 0x0b, 0xbb, 0x5c },
    { 0xda, 0x5c, 0x1e, 0x53, 0x1d, 0x83, 0x59, 0x15, 0x78, 0x75, 0xbd, 0x63, 0xbf, 0xaa, 0xfa, 0x25 },
    { 0x1f, 0x6d, 0x31, 0xc8, 0x83, 0xdd, 0x71, 0x6d, 0x7e, 0x8f, 0x59, 0x8c, 0xe2, 0x3f, 0x19, 0x29 },
    { 0x4b, 0xb0, 0xde, 0x04, 0xe4, 0xe0, 0x85, 0x69, 0x80, 0xcc, 0xb2, 0x94, 0x2f, 0x9c, 0xe9, 0xf9 },
    { 0x8b, 0xce, 0x54, 0xdc, 0x4c, 0x11, 0x13, 0x9a, 0x78, 0x75, 0xbd, 0x63, 0xbf, 0xaa, 0xfa, 0x25 },
    { 0xec, 0x13, 0x34, 0x59, 0x66, 0xce, 0x73, 0x12, 0x44, 0x00, 0x89, 0xa2, 0xce, 0xdd, 0xce, 0xe9 },
    { 0xe4, 0x66, 0x2c, 0x70, 0x9c, 0x75, 0x3a, 0x03, 0x9a, 0x2c, 0x0f, 0x5a, 0xe2, 0x3f, 0x19, 0x29 },
    { 0xa4, 0x92, 0xfc, 0x90, 0x33, 0x94, 0x9c, 0x15, 0xa0, 0x33, 0xac, 0x22, 0x37, 0x35, 0xcc, 0xa7 },
    { 0x25, 0x09, 0x9c, 0x1f, 0x91, 0x1a, 0x26, 0xe5, 0xce, 0x91, 0x72, 0xf0, 0x7a, 0x82, 0xc8, 0x0a },
    { 0xd1, 0xd2, 0x9d, 0x74, 0x46, 0xd4, 0xfd, 0xf1, 0xa0, 0x33, 0xac, 0x22, 0x37, 0x35, 0xcc, 0xa7 },
    { 0x7e, 0xb2, 0x68, 0x37, 0x3b, 0x5d, 0x36, 0x1e, 0xd6, 0xd3, 0x13, 0xe2, 0x93, 0x3c, 0x4d, 0xcb },
    { 0xa1, 0xc7, 0xd2, 0xea, 0x66, 0x18, 0x95, 0xac, 0x78, 0x75, 0xbd, 0x63, 0xbf, 0xaa, 0xfa, 0x25 },
    { 0x82, 0xa4, 0x3b, 0x21, 0x08, 0x79, 0x7c, 0x6a, 0x44, 0x00, 0x89, 0xa2, 0xce, 0xdd, 0xce, 0xe9 },
    { 0x41, 0xd0, 0x55, 0xb3, 0xdd, 0x60, 0x15, 0x16, 0x7e, 0x8f, 0x59, 0x8c, 0xe2, 0x3f, 0x19, 0x29 },
  };

  QMap<i32, u8*> chunkCache;
  QMap<i64, i64> metaChunk;
  QMap<i32, i64> chunkOffsetDict;

  QFile inputFileHandle;
  QDataStream reader;

  u8* curChunkDecompressed = nullptr;
  u8* nextChunkDecompressed = nullptr;
  int curPointer = 0;
  int curIndex = 0;
  int dictCount = 0;
  QString inputFilePath;

  QList<int> chunkKeyPattern;

  void InitChunkKeys();

  u8* GetDecompressedChunk(i64 offset, i64 size, QDataStream* reader, i32 chunkNum);

  u8* GetByLength(i64 targetlength, u8* tmp, i64 startAddr);
  QString GetASCIIString(int targetlength);
  i32 GetInt32();
  i64 GetInt64();
  void ClearChunk(u8** chunk);
  void ClearChunkCache(QMap<i32, u8*>* cache);

public:
  Chunk();
  ~Chunk();

  static u8* OodleDecompress(u8* buffer, i32 size, i32 uncompressedSize, i32* decompressCount);

  QList<FileNode*> AnalyseChunk(const QString& inputFile, QList<FileNode*> inputFileNodeList);
  int ExtractSelected(QList<FileNode*> itemlist, const QString& BaseLocation);
  u8* GetFileData(FileNode* node);

  u8* GetChunkKey(int i);
  static u8* DecryptChunk(u8* data, u32 size, u8* chunkKey);

  Chunk* GetChunk(const QString& chunk);
};
